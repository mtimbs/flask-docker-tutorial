trigger:
  branches:
    include:
    - master
    - dev
    exclude:
    - feature/*

# specific branch build
pr:
  branches:
    include:
    - master
    - dev
    - feature/*

variables:
    - name: vmImageName
      value: 'ubuntu-latest'
    - name: dockerfilePath
      value: './Dockerfile'
    - name: imageName
      value: flask

stages:
  # Protect against deploys running pipenv --install on a repo with no lockfile
  - stage: Precheck
    jobs:
    - job: Lockfile
      steps:
        - bash: |
            if [! -e Pipfile.lock ]; then
              echo "NO LOCK FILE."; false
            fi
          displayName: 'Check for lockfile'

  # Don't deploy if dependencies have known security vulnerabilities
    - job: Security
      pool:
        vmImage:  $(vmImageName)
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.7'
              architecture: 'x64'
          - script: |
              sudo -H pip install -U pipenv
              pipenv check
            displayName: 'Check for known security vulnerabilities in dependencies'

  - stage: Test
    # Fail if tests don't pass
    jobs:
      - job: tests
        pool:
          vmImage:  $(vmImageName)
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.7'
              architecture: 'x64'
          - script: |
              sudo -H pip install -U pipenv
              pipenv install --dev
              python -m pytest -x
            displayName: 'Run tests'


  - stage: Build
    displayName: Build and push stage
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              command: buildAndPush
              repository: $(imageName)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags:
                $(Build.BuildId)
                $(Build.SourceVersion)
